import declassifyutil
import lists

let 
    val pid = self()
    val myLev = `{alice}`
    val myName = "Alice" raisedTo myLev
    val myYear = 2100 raisedTo myLev
    val myGender = true raisedTo myLev
    val myInterests = ["dragons", "wars", "fire"] raisedTo myLev
    val myProfile = (myLev, myName, myYear, myGender, myInterests)
    
    fun agent (lev, name, year, gender, interests) = 
        let val youngerThanMe = if declassify_with_block(myYear < year, authority, lev) then true else false
            val man = if gender then false else true 
            val likesWinter = if elem "winter" interests then true else false
            val isDanaerys = if name = "Daenerys" then true else false
            val match = if youngerThanMe andalso (man orelse likesWinter) orelse isDanaerys
                        then (true raisedTo lev, declassifydeep(myProfile, authority, lev))
                        else (false raisedTo lev, ())
        in match
        end
    
    fun loop matches =
        let
            val match = receive [ hn ("NEWMATCH", data) => data]
            val _ = print match
            val allMatches = append matches [match]
        in loop allMatches
        end

    fun main () =
        let
            val message = ("NEWPROFILE", (myProfile, agent, pid))
            val datingServer = whereis ("QmSC4Z8K56hLM6n27JhwfyX4K3je8eijaoX5ztmKdNLEc9", "datingServer")
            val _ = send(datingServer, message)
        in loop []
        end

in main ()
end