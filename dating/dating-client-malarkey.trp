import declassifyutil
import lists

let 
    val pid = self()
    val myLev = `{malarkey}`
    val myName = "Malarkey" raisedTo myLev
    val myYear = 2999 raisedTo myLev
    val myGender = false raisedTo myLev
    val myInterests = ["beer", "olderWomen"] raisedTo myLev
    val myProfile = (myLev, myName, myYear, myGender, myInterests)
    
    fun agent (lev, name, year, gender, interests) = 
        let val _ = send (pid, ("LEAK", lev))
            val _ = send (pid, ("COUNT"))
            val match = (true raisedTo lev, declassifydeep(myProfile, authority, lev))
        in match
        end
        
    fun loop matches =
        let val newMatch = receive
                                    [
                                        hn ("NEWMATCH", data) => data,
                                        hn ("LEAK", data) => print data,
                                    ]
            val _ = print newMatch
            val allMatches = append matches [newMatch]
        in loop allMatches
        end

    fun main () =
        let
            val message = ("NEWPROFILE", (myProfile, agent, pid))
            val datingServer = whereis ("QmSC4Z8K56hLM6n27JhwfyX4K3je8eijaoX5ztmKdNLEc9", "datingServer")
            val _ = send(datingServer, message)
        in loop []
        end

in main ()
end