import declassifyutil

let fun client () =
   let fun alice () =
      let val trustLevel = `{alice}`
         val ownName = "Alice" raisedTo trustLevel
         val ownYear = 1900 raisedTo trustLevel
         val ownGender = false raisedTo trustLevel
         val ownInterests = ["Cheese", "Wine"] raisedTo trustLevel
         val ownProfile = (trustLevel, ownName, ownYear, ownGender, ownInterests)
         val pid = self ()
         fun agentAcceptAll _ = (true, ownProfile)
         fun agentRejectAll _ = (false, ())

         fun agentHetero (lev, name, year, gender, interests) =
            (*let val authMatch = attenuate (authority, trustLevel)*)
            let val declassProfile = declassifydeep(ownProfile, authority, lev)
         
            (*val _ = printWithLabels declassProfile*)
            val declassOwnGender = declassify(ownGender, authority, lev)
            val match = if gender andalso declassOwnGender then (false, ())
                           else (true raisedTo lev, declassProfile)
            in match
            end

      
         val message = ("NEWPROFILE", (ownProfile, agentHetero, pid))

         val datingServer = whereis ("QmSC4Z8K56hLM6n27JhwfyX4K3je8eijaoX5ztmKdNLEc9", "datingServer")

         val _ = print "CLIENT SENDED"

         (* Now we receive the match from the server *)
         (*val _ = receive [hn ("NEWMATCH", match2)
                            => printWithLabels match2
                        ]
         *)

      in send (datingServer, message)
      end

   in alice ()
   end

in client ()   
end