(* Starting file for the server *)

import lists
let fun server () = (* TODO: finish this *)

   (*
   receivedProfiles = list of profiles
   on receive => add NEWPROFILE to receivedProfiles,
                for each profile_i in receivedProfiles
                    NEWPROFILE in agent_i
                    profile_i in agent_new
                if both match, send profiles with augmented authority_level to other
   *) 

    let val (profile1, agent1, pid1) = receive [hn ("NEWPROFILE", data1)
                            => data1
                        ]

        val (profile2, agent2, pid2) = receive [hn ("NEWPROFILE", data2)
                            => data2
                        ]

        val z = 
            let pini authority

                val profileMatch1 = agent2 profile1

                val _ = send (pid1, ("NEWMATCH", profileMatch1))
                val _ = print ("MATCH SENDED")
            
            in z
            end

        (* BOB SCOPE *)
        val _ =
            let pini authority

                val profileMatch2 = agent1 profile2
                
                val _ = send (pid2, ("NEWMATCH", profileMatch2))
                val _ = print ("MATCH SENDED")
            in ()
            end
        

    in server ()
    end

    (* Our main function starts the server and then requests the
       dispatcher to send some clients this way. *)

    fun main () =       
        let val thisNode = node (self ())
            val _ = printString ("Running node with identifier: " ^ thisNode)
            val _ =  register ("datingServer", spawn server, authority)

        in  (* TODO: Feel free to comment out the next line
                     while you develop your solution and work on a few 
                     custom clients;  *)

            (*send (whereis ("@dispatcher", "dispatcher"), ("DISPATCH", thisNode));*)
            ()
        end
in main ()
end
